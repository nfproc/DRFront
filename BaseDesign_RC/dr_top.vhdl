-- DRFront: A Dynamic Reconfiguration Frontend for Xilinx FPGAs
-- Copyright (C) 2022 Naoki FUJIEDA. New BSD License is applied.
------------------------------------------------------------------------

-- NOTE: This file is generated by DRFront automatically. Do not modify this file.

library IEEE;
use IEEE.std_logic_1164.ALL;

entity DR_TOP is
    port ( SW                             : in  std_logic_vector(15 downto 0);
           BTNC, BTNL, BTNR, BTNU, BTND   : in  std_logic;
           CLK, RST                       : in  std_logic;
           LD                             : out std_logic_vector(15 downto 0);
           AN                             : out std_logic_vector(7 downto 0);
           CA, CB, CC, CD, CE, CF, CG, DP : out std_logic);
end DR_TOP;

architecture STRUCTURE of DR_TOP is
    component dr_base is
        port (
            AN : Out std_logic_vector(7 downto 0);
            BTNC : In std_logic;
            BTND : In std_logic;
            BTNL : In std_logic;
            BTNR : In std_logic;
            BTNU : In std_logic;
            CLK : In std_logic;
            LD : Out std_logic_vector(15 downto 0);
            RST : In std_logic;
            SEG : Out std_logic_vector(7 downto 0);
            SW : In std_logic_vector(15 downto 0));
    end component;
begin
    usr : dr_base port map (
        AN(0) => AN(0),
        AN(1) => AN(1),
        AN(2) => AN(2),
        AN(3) => AN(3),
        AN(4) => AN(4),
        AN(5) => AN(5),
        AN(6) => AN(6),
        AN(7) => AN(7),
        BTNC => BTNC,
        BTND => BTND,
        BTNL => BTNL,
        BTNR => BTNR,
        BTNU => BTNU,
        CLK => CLK,
        LD(0) => LD(0),
        LD(1) => LD(1),
        LD(2) => LD(2),
        LD(3) => LD(3),
        LD(4) => LD(4),
        LD(5) => LD(5),
        LD(6) => LD(6),
        LD(7) => LD(7),
        LD(8) => LD(8),
        LD(9) => LD(9),
        LD(10) => LD(10),
        LD(11) => LD(11),
        LD(12) => LD(12),
        LD(13) => LD(13),
        LD(14) => LD(14),
        LD(15) => LD(15),
        RST => RST,
        SEG(0) => DP,
        SEG(1) => CG,
        SEG(2) => CF,
        SEG(3) => CE,
        SEG(4) => CD,
        SEG(5) => CC,
        SEG(6) => CB,
        SEG(7) => CA,
        SW(0) => SW(0),
        SW(1) => SW(1),
        SW(2) => SW(2),
        SW(3) => SW(3),
        SW(4) => SW(4),
        SW(5) => SW(5),
        SW(6) => SW(6),
        SW(7) => SW(7),
        SW(8) => SW(8),
        SW(9) => SW(9),
        SW(10) => SW(10),
        SW(11) => SW(11),
        SW(12) => SW(12),
        SW(13) => SW(13),
        SW(14) => SW(14),
        SW(15) => SW(15) );
end STRUCTURE;

