// DRFront: A Dynamic Reconfiguration Frontend for Xilinx FPGAs
// Copyright (C) 2022-2024 Naoki FUJIEDA. New BSD License is applied.
//**********************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows;

namespace DRFront
{
    // ■■ Vivado の起動等に関するメソッド ■■
    public partial class MainWindow : Window
    {
        // Vivado の起動準備が整っているか確認
        private bool CheckForLaunchVivado()
        {
            List<string> vers = Util.GetVivadoVersions(ST.VivadoRootPath);
            if (ST.VivadoVersion == null || ! vers.Contains(ST.VivadoVersion))
            {
                string findDir = ST.VivadoRootPath;
                if (ST.VivadoVersion != null)
                    findDir += ST.VivadoVersion;
                MsgBox.Warn("Vivado が " + findDir + " に見つかりませんでした．\n"
                    + "Vivado がインストールされている場合は，環境設定を確認してください．");
                return false;
            }
            if (VM.IsSourceValid && VM.SourceProblem != "")
            {
                if (! MsgBox.WarnAndConfirm(VM.SourceProblem + "\n続行しますか？"))
                    return false;
            }
            if (VivadoLastLaunched != null)
            {
                TimeSpan ts = DateTime.Now - VivadoLastLaunched;
                if (ts.TotalSeconds < 10)
                {
                    MsgBox.Warn("Vivado を起動中です．しばらくお待ちください．");
                    return false;
                }
            }
            return true;
        }

        // Vivado に与える Tcl ファイルを作成する
        private bool PrepareTcl(string project, string tclFile, string template, Dictionary<string, string> args = null)
        {
            try
            {
                StreamWriter sw = File.CreateText(VM.SourceDirPath + @"\" + project + @"\" + tclFile);
                string[] templateLines = template.Replace("\r\n","\n").Split(new[]{ '\n'});
                sw.WriteLine("## WARNING: This Tcl script is automatically generated from DRFront " + DRFrontVersion + ".");
                sw.WriteLine("## Do not edit this file by hand.");
                sw.WriteLine("");

                if (args != null)
                {
                    foreach (KeyValuePair<string, string> arg in args)
                        sw.WriteLine("set " + arg.Key + " " + arg.Value);
                    sw.WriteLine("");
                }
                foreach (string line in templateLines)
                    sw.WriteLine(line);
                sw.Close();
            }
            catch (IOException ex)
            {
                MsgBox.Warn("スクリプトファイルの作成中にエラーが発生しました．\n" + ex.Message);
                return false;
            }
            return true;
        }

        // Tcl ファイルを作成したときの DRFront のバージョンを取得する
        private int GetTclVersion(string project, string tclFile)
        {
            string fullFileName = VM.SourceDirPath + @"\" + project + @"\" + tclFile;
            if (! File.Exists(fullFileName))
                return -1;
            try
            {
                StreamReader sr = new StreamReader(fullFileName, Encoding.GetEncoding("ISO-8859-1"));
                string line = sr.ReadLine();
                Match match = Regex.Match(line, @"DRFront ([0-9]+)\.([0-9]+)\.([0-9]+)");
                sr.Close();
                if (match.Success)
                    return int.Parse(match.Groups[1].Value) * 10000 +
                           int.Parse(match.Groups[2].Value) * 100 +
                           int.Parse(match.Groups[3].Value);
                else
                    return 0;
            }
            catch (IOException)
            {
                return -1;
            }
        }

        // Tcl ファイルを作成したときの DRFront のバージョンが古くないかチェック
        private bool CheckTclVersion(string project, string tclFile)
        {
            int ver = GetTclVersion(project, tclFile);
            if (ver == -1 || ver >= 500) // 0.5.0 以上なら OK
                return true;

            string warnMessage = "Vivado 用のスクリプトが，過去の DRFront で作成されたもののようです．\n"
                + "Create/Update Files ボタンでスクリプトを更新することをおすすめします．\n"
                + "このまま続けますか？";
            return MsgBox.WarnAndConfirm(warnMessage);
        }

        // Vivado を起動する
        private bool LaunchVivado(string project, string tclFile, bool batchMode = false)
        {
            VivadoLastLaunched = DateTime.Now;
            Process p = new Process();
            try
            {
                string vivadoMode = (batchMode) ? "batch" : "tcl";
                string vivadoDir = ST.VivadoRootPath + ST.VivadoVersion;
                p.StartInfo.FileName = vivadoDir + @"\bin\vivado.bat";
                p.StartInfo.UseShellExecute = false;
                p.StartInfo.CreateNoWindow = false; // あえてコマンドプロンプトを表示させる
                p.StartInfo.WorkingDirectory = VM.SourceDirPath + @"\" + project;
                p.StartInfo.Arguments = "-log logs/vivado.log -mode " + vivadoMode + " -source " + tclFile + " -nojournal";
                p.StartInfo.Environment["PATH"] += ";" + vivadoDir + @"\bin;" + vivadoDir + @"\lib\win64.o";
                p.StartInfo.Environment["XILINX_VIVADO"] = vivadoDir;
                p.Start();
            }
            catch (Win32Exception ex)
            {
                MsgBox.Warn("Vivado の起動中にエラーが発生しました．\n" + ex.Message);
                return false;
            }
            return true;
        }
    }
}
